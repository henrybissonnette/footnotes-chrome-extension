// Generated by CoffeeScript 1.4.0
(function() {
  var QuestionView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Footnotes.Views.QuestionView = QuestionView = (function(_super) {

    __extends(QuestionView, _super);

    function QuestionView() {
      return QuestionView.__super__.constructor.apply(this, arguments);
    }

    QuestionView.prototype.tagName = 'div';

    QuestionView.prototype.className = 'footnote';

    QuestionView.prototype.events = {
      'click a': 'onLinkClick',
      'click .minimize': 'onToggleView',
      'click .edit': 'edit',
      'click .close': 'onClose',
      'click .delete': 'delete',
      'submit form': 'submit',
      'click': 'viewFootnote'
    };

    QuestionView.prototype.initialize = function() {
      this.model.bind("change", this.render, this);
      this.model.bind("destroy", this.clear, this);
      this.$el.addClass(this.model.get('noteType'));
      return this.$el.attr('id', "" + (this.model.get("noteType")) + (this.model.get("id")));
    };

    QuestionView.prototype.render = function() {
      this.$el.html(Footnotes.template('notes/questionTemplate').render(this.context()));
      return this;
    };

    QuestionView.prototype.onToggleView = function(event) {
      var others, typeIndicator;
      event.stopPropagation();
      others = this.$el.find('.title').siblings();
      typeIndicator = this.$(".type_indicator");
      typeIndicator.remove();
      return others.each(function() {
        if ($(this).is(":visible")) {
          $(this).siblings(".title").find('.minimize').text('+');
          $(this).siblings(".title").addClass('minimized');
          $(this).siblings(".title").prepend(typeIndicator);
          return $(this).hide();
        } else {
          $(this).siblings(".title").find('.minimize').text('-');
          $(this).siblings(".title").removeClass('minimized');
          $(this).siblings(".content").prepend(typeIndicator);
          return $(this).show();
        }
      });
    };

    QuestionView.prototype.edit = function() {
      var form;
      form = Footnotes.template('forms/questionFormTemplate').render(this.context());
      return this.$el.html(form);
    };

    QuestionView.prototype["delete"] = function(event) {
      event.preventDefault();
      if (confirm("Permanently delete " + (this.model.get("title")) + "?")) {
        return this.model.destroy();
      }
    };

    QuestionView.prototype.clear = function() {
      return this.$el.remove();
    };

    QuestionView.prototype.context = function() {
      return {
        title: this.model.get("title"),
        creatorName: this.model.get("creatorName"),
        content: this.model.get("content"),
        id: this.model.get("id"),
        createdAt: new Date(this.model.get("createdAt")),
        creatorID: this.model.get("creatorID"),
        createdAtPretty: this.model.get("createdAtPretty"),
        noteType: this.model.get("noteType"),
        descendantCount: this.model.get("descendantCount")
      };
    };

    QuestionView.prototype.onClose = function(event) {
      event.preventDefault();
      return this.close();
    };

    QuestionView.prototype.close = function(event) {
      return this.render();
    };

    QuestionView.prototype.submit = function(event) {
      var data;
      event.preventDefault();
      data = Footnotes.formToObj(this.$('form'));
      this.model.save(data);
      return this.close();
    };

    QuestionView.prototype.viewFootnote = function() {
      return this.$el.trigger({
        type: 'viewFootnote',
        model: this.model
      });
    };

    QuestionView.prototype.onLinkClick = function(event) {
      return event.stopPropagation();
    };

    return QuestionView;

  })(Backbone.View);

}).call(this);
